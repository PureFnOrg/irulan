(ns org.purefn.irulan.response
  "Common utilties and specs for command responses."
  (:require [clojure.spec.alpha :as s]
            [clojure.spec.gen.alpha :as gen]

            [org.purefn.irulan.command :as command]
            [org.purefn.irulan.common :as common]
            [org.purefn.irulan.registry :as registry]))


;;-------------------------------------------------------
;; Command response
;;-------------------------------------------------------

;; Command responses need:
;; - some idea of metadata (need yet another name here) with
;;   - command id
;;   - host (of requestor)
;;   - processing time (span)
;;   - timestamp
;;   - processed by (much like generated by in command handler)
;;   - processing time
;; - type
;; - outcome (accepted/rejected)


;; The host of the command handler for this command
(s/def ::host common/host?)

;; Processing time for the command
(s/def ::span nat-int?)

;; version of the processor - either a release version or commit hash
(s/def ::version common/version?)

;; Time the response was generated
(s/def ::responded-at common/timestamp?)

;; the command handler that processed this command
(s/def ::handler common/handler?)

;; events generated by this command
(s/def ::generated (s/coll-of uuid?))

;; data about the processing of this command
(s/def ::processed-by (s/keys :req [::handler ::host]
                              :opt [::version ::span]))

(s/def ::processed (s/keys :req [::processed-by ::responded-at]
                           :opt [::command/host ::generated]))

(defmulti response-type ::response-type)

(s/def ::payload (s/multi-spec response-type ::response-type))

(s/def ::response (s/keys :req [::payload ::command/id ::command/response-id]
                          :opt [::processed ::command/process-id]))

(defmacro defresponse
  "Defines a new response type, with a constructor bound to the given `name`
  var and docstring."
  [name doc response-type spec]
  `(do
     (defmethod response-type ~response-type [~'_] ~spec)
     (s/def ~response-type ::response)
     (defn ~name
       {:doc ~doc}
       [~'command ~'payload]
       (merge (select-keys ~'command [::command/id ::command/response-id
                                      ::command/process-id])
              {::payload (assoc ~'payload
                                ::response-type ~response-type)}))))
